type: subject

body: null

footer: null

# ========= INSTRUCTIONS FOR USE =====================================|
#
# The Type
# The type is contained within the title:
#
# - feat: a new feature
# - fix: a bug fix
# - docs: changes to documentation
# - style: formatting, missing semi colons, etc; no code change
# - refactor: reorganization the code without changing his behavior.
# - test: adding tests, refactoring test; no production code change
# - chore: updating build tasks, package manager configs,
# etc; no production code change
# - anything:Depending on how you decide with your team, 
# you can add other types here.
# ====================================================================|
# The Subject
# Subjects should be no greater than 50 characters,
# should begin with a capital letter
# and do not end with a period.
# Use an imperative tone to describe what a commit does,
# rather than what it did.
# Scope: You can specify the scope of changes in the commit by using 
# () after the type.
# ====================================================================|
# The Body (optional)
# Not all commits are complex enough to warrant a body,
# therefore it is optional and only used when a commit
# requires a bit of explanation and context. Use the
# body to explain the what and why of a commit, not the how.
# When writing a body, the blank line between the title
# and the body is required and you should limit the length
# of each line to no more than 72 characters.
# - what has changed now compared to the previous version
# - what is the reason for the changes
#Â - "something to look at." There may be a specific file.
# ====================================================================|
# The Footer (optional)
# The footer is optional and is used to reference issue tracker IDs.
# Breaking Changes: If your comment has made changes that may "break" 
# the existing code, indicate this in the comment using the 
# keyword BREAKING CHANGE.
# ======================= SAMPLE COMMIT ==============================|
#
# feat: Summarize changes in around 50 characters or less
#
# More detailed explanatory text, if necessary. Wrap it to about 72
# characters or so. In some contexts, the first line is treated as the
# subject of the commit and the rest of the text as the body. The
# blank line separating the summary from the body is critical (unless
# you omit the body entirely); various tools like `log`, `shortlog`
# and `rebase` can get confused if you run the two together.
#
# Explain the problem that this commit is solving. Focus on why you
# are making this change as opposed to how (the code explains that).
# Are there side effects or other unintuitive consequenses of this
# change? Here's the place to explain them.
#
# BREAKING CHANGES: This release contains breaking changes to the API.
# Further paragraphs come after blank lines.
#
#  ======================= SAMPLE COMMIT END =========================|
#
# - Bullet points are okay, too
#
# - Typically a hyphen or asterisk is used for the bullet, preceded
#   by a single space, with blank lines in between, but conventions
#   vary here
#
# If you use an issue tracker, put references to them at the bottom,
# like this:
#
# Resolves: #123
# See also: #456, #789
# ======================= USEFUL SOURCES =============================|
# 
# More info you can find on the official website of 
# Conventional Commits -> https://www.conventionalcommits.org/
